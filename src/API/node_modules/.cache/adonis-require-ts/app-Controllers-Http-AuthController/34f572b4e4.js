"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class AuthController {
    async register({ request }) {
        const validatios = await Validator_1.schema.create({
            username: Validator_1.schema.string({}, [
                Validator_1.rules.unique({ table: 'users', column: 'username' }),
                Validator_1.rules.minLength(53)
            ]),
            name: Validator_1.schema.string({}, [
                Validator_1.rules.minLength(3)
            ]),
            surname: Validator_1.schema.string({}, [
                Validator_1.rules.minLength(3)
            ]),
            password: Validator_1.schema.string({}, [
                Validator_1.rules.minLength(4)
            ])
        });
        const data = request.validate({ schema: validatios });
        const body = request.body();
        const user = await User_1.default.create(body);
        return user;
    }
    async login({ request, response, auth }) {
        const username = request.input('username');
        const password = request.input('password');
        const token = await auth.attempt(username, password);
        return token.toJSON();
    }
}
exports.default = AuthController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJBdXRoQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLDJFQUF5RDtBQUV6RCxpRkFBbUM7QUFFbkMsTUFBcUIsY0FBYztJQUN4QixLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUMsT0FBTyxFQUFxQjtRQUUvQyxNQUFNLFVBQVUsR0FBRyxNQUFNLGtCQUFNLENBQUMsTUFBTSxDQUFDO1lBQ25DLFFBQVEsRUFBQyxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUM7Z0JBQ3RCLGlCQUFLLENBQUMsTUFBTSxDQUFDLEVBQUMsS0FBSyxFQUFDLE9BQU8sRUFBQyxNQUFNLEVBQUMsVUFBVSxFQUFDLENBQUM7Z0JBQy9DLGlCQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQzthQUN0QixDQUFDO1lBQ0YsSUFBSSxFQUFDLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBQztnQkFDbEIsaUJBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2FBQ3JCLENBQUM7WUFDRixPQUFPLEVBQUMsa0JBQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFDO2dCQUNyQixpQkFBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7YUFDckIsQ0FBQztZQUNGLFFBQVEsRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUM7Z0JBQ3ZCLGlCQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQzthQUNyQixDQUFDO1NBQ0wsQ0FBQyxDQUFBO1FBRUYsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFDLE1BQU0sRUFBQyxVQUFVLEVBQUMsQ0FBQyxDQUFBO1FBRWxELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUMzQixNQUFNLElBQUksR0FBRyxNQUFNLGNBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFcEMsT0FBTyxJQUFJLENBQUE7SUFDZixDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFDLE9BQU8sRUFBQyxRQUFRLEVBQUMsSUFBSSxFQUFxQjtRQUMxRCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzFDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDMUMsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBQyxRQUFRLENBQUMsQ0FBQTtRQUVuRCxPQUFPLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUN6QixDQUFDO0NBQ0o7QUFsQ0QsaUNBa0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcbmltcG9ydCB7IHNjaGVtYSwgcnVsZXN9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvVmFsaWRhdG9yJ1xuXG5pbXBvcnQgVXNlciBmcm9tIFwiQXBwL01vZGVscy9Vc2VyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dGhDb250cm9sbGVyIHtcbiAgICBwdWJsaWMgYXN5bmMgcmVnaXN0ZXIoe3JlcXVlc3R9Okh0dHBDb250ZXh0Q29udHJhY3Qpe1xuXG4gICAgICAgIGNvbnN0IHZhbGlkYXRpb3MgPSBhd2FpdCBzY2hlbWEuY3JlYXRlKHtcbiAgICAgICAgICAgIHVzZXJuYW1lOnNjaGVtYS5zdHJpbmcoe30sW1xuICAgICAgICAgICAgICAgIHJ1bGVzLnVuaXF1ZSh7dGFibGU6J3VzZXJzJyxjb2x1bW46J3VzZXJuYW1lJ30pLFxuICAgICAgICAgICAgICAgIHJ1bGVzLm1pbkxlbmd0aCg1MylcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbmFtZTpzY2hlbWEuc3RyaW5nKHt9LFtcbiAgICAgICAgICAgICAgICBydWxlcy5taW5MZW5ndGgoMylcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgc3VybmFtZTpzY2hlbWEuc3RyaW5nKHt9LFtcbiAgICAgICAgICAgICAgICBydWxlcy5taW5MZW5ndGgoMylcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IHNjaGVtYS5zdHJpbmcoe30sW1xuICAgICAgICAgICAgICAgIHJ1bGVzLm1pbkxlbmd0aCg0KVxuICAgICAgICAgICAgXSlcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zdCBkYXRhID0gcmVxdWVzdC52YWxpZGF0ZSh7c2NoZW1hOnZhbGlkYXRpb3N9KVxuXG4gICAgICAgIGNvbnN0IGJvZHkgPSByZXF1ZXN0LmJvZHkoKVxuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5jcmVhdGUoYm9keSlcblxuICAgICAgICByZXR1cm4gdXNlciAgICAgICAgXG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGxvZ2luKHtyZXF1ZXN0LHJlc3BvbnNlLGF1dGh9Okh0dHBDb250ZXh0Q29udHJhY3Qpe1xuICAgICAgICBjb25zdCB1c2VybmFtZSA9IHJlcXVlc3QuaW5wdXQoJ3VzZXJuYW1lJylcbiAgICAgICAgY29uc3QgcGFzc3dvcmQgPSByZXF1ZXN0LmlucHV0KCdwYXNzd29yZCcpXG4gICAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgYXV0aC5hdHRlbXB0KHVzZXJuYW1lLHBhc3N3b3JkKVxuXG4gICAgICAgIHJldHVybiB0b2tlbi50b0pTT04oKVxuICAgIH1cbn1cbiJdfQ==