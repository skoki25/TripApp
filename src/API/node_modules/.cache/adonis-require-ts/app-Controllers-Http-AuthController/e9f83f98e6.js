"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class AuthController {
    async register({ request }) {
        const validatios = await Validator_1.schema.create({
            username: Validator_1.schema.string({}, [
                Validator_1.rules.unique({ table: 'users', column: 'username' }),
                Validator_1.rules.minLength(3)
            ]),
            name: Validator_1.schema.string({}, [
                Validator_1.rules.minLength(3)
            ]),
            surname: Validator_1.schema.string({}, [
                Validator_1.rules.minLength(3)
            ]),
            password: Validator_1.schema.string({}, [
                Validator_1.rules.minLength(4)
            ]),
            age: Validator_1.schema.number()
        });
        const data = await request.validate({ schema: validatios });
        const user = await User_1.default.create(data);
        return data;
    }
    async login({ request, response, auth }) {
        const username = request.input('username');
        const password = request.input('password');
        const token = await auth.attempt(username, password);
        return token.toJSON();
    }
}
exports.default = AuthController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJBdXRoQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLDJFQUF5RDtBQUV6RCxpRkFBbUM7QUFFbkMsTUFBcUIsY0FBYztJQUN4QixLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUMsT0FBTyxFQUFxQjtRQUUvQyxNQUFNLFVBQVUsR0FBRyxNQUFNLGtCQUFNLENBQUMsTUFBTSxDQUFDO1lBQ25DLFFBQVEsRUFBQyxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUM7Z0JBQ3RCLGlCQUFLLENBQUMsTUFBTSxDQUFDLEVBQUMsS0FBSyxFQUFDLE9BQU8sRUFBQyxNQUFNLEVBQUMsVUFBVSxFQUFDLENBQUM7Z0JBQy9DLGlCQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQzthQUNyQixDQUFDO1lBQ0YsSUFBSSxFQUFDLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBQztnQkFDbEIsaUJBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2FBQ3JCLENBQUM7WUFDRixPQUFPLEVBQUMsa0JBQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFDO2dCQUNyQixpQkFBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7YUFDckIsQ0FBQztZQUNGLFFBQVEsRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUM7Z0JBQ3ZCLGlCQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQzthQUNyQixDQUFDO1lBQ0YsR0FBRyxFQUFDLGtCQUFNLENBQUMsTUFBTSxFQUFFO1NBQ3RCLENBQUMsQ0FBQTtRQUVGLE1BQU0sSUFBSSxHQUFHLE1BQU0sT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFDLE1BQU0sRUFBQyxVQUFVLEVBQUMsQ0FBQyxDQUFBO1FBR3hELE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNwQyxPQUFPLElBQUksQ0FBQTtJQUVmLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUMsT0FBTyxFQUFDLFFBQVEsRUFBQyxJQUFJLEVBQXFCO1FBQzFELE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDMUMsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUMxQyxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFDLFFBQVEsQ0FBQyxDQUFBO1FBRW5ELE9BQU8sS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQ3pCLENBQUM7Q0FDSjtBQW5DRCxpQ0FtQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IHsgc2NoZW1hLCBydWxlc30gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9WYWxpZGF0b3InXG5cbmltcG9ydCBVc2VyIGZyb20gXCJBcHAvTW9kZWxzL1VzZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0aENvbnRyb2xsZXIge1xuICAgIHB1YmxpYyBhc3luYyByZWdpc3Rlcih7cmVxdWVzdH06SHR0cENvbnRleHRDb250cmFjdCl7XG5cbiAgICAgICAgY29uc3QgdmFsaWRhdGlvcyA9IGF3YWl0IHNjaGVtYS5jcmVhdGUoe1xuICAgICAgICAgICAgdXNlcm5hbWU6c2NoZW1hLnN0cmluZyh7fSxbXG4gICAgICAgICAgICAgICAgcnVsZXMudW5pcXVlKHt0YWJsZTondXNlcnMnLGNvbHVtbjondXNlcm5hbWUnfSksXG4gICAgICAgICAgICAgICAgcnVsZXMubWluTGVuZ3RoKDMpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG5hbWU6c2NoZW1hLnN0cmluZyh7fSxbXG4gICAgICAgICAgICAgICAgcnVsZXMubWluTGVuZ3RoKDMpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIHN1cm5hbWU6c2NoZW1hLnN0cmluZyh7fSxbXG4gICAgICAgICAgICAgICAgcnVsZXMubWluTGVuZ3RoKDMpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIHBhc3N3b3JkOiBzY2hlbWEuc3RyaW5nKHt9LFtcbiAgICAgICAgICAgICAgICBydWxlcy5taW5MZW5ndGgoNClcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgYWdlOnNjaGVtYS5udW1iZXIoKVxuICAgICAgICB9KVxuXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXF1ZXN0LnZhbGlkYXRlKHtzY2hlbWE6dmFsaWRhdGlvc30pXG5cblxuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5jcmVhdGUoZGF0YSlcbiAgICAgICAgcmV0dXJuIGRhdGFcblxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBsb2dpbih7cmVxdWVzdCxyZXNwb25zZSxhdXRofTpIdHRwQ29udGV4dENvbnRyYWN0KXtcbiAgICAgICAgY29uc3QgdXNlcm5hbWUgPSByZXF1ZXN0LmlucHV0KCd1c2VybmFtZScpXG4gICAgICAgIGNvbnN0IHBhc3N3b3JkID0gcmVxdWVzdC5pbnB1dCgncGFzc3dvcmQnKVxuICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IGF1dGguYXR0ZW1wdCh1c2VybmFtZSxwYXNzd29yZClcblxuICAgICAgICByZXR1cm4gdG9rZW4udG9KU09OKClcbiAgICB9XG59XG4iXX0=