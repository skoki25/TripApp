"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const authConfig = {
    guard: 'api',
    list: {
        api: {
            driver: 'oat',
            tokenProvider: {
                driver: 'database',
                table: 'api_tokens',
                foreignKey: 'user_id',
            },
            provider: {
                driver: 'lucid',
                identifierKey: 'id',
                uids: ['username'],
                model: () => Promise.resolve().then(() => __importStar(global[Symbol.for('ioc.use')]('App/Models/User'))),
            },
        },
    },
};
exports.default = authConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQSxNQUFNLFVBQVUsR0FBZTtJQUM3QixLQUFLLEVBQUUsS0FBSztJQUNaLElBQUksRUFBRTtRQWNKLEdBQUcsRUFBRTtZQUNILE1BQU0sRUFBRSxLQUFLO1lBZWIsYUFBYSxFQUFFO2dCQUNiLE1BQU0sRUFBRSxVQUFVO2dCQUNsQixLQUFLLEVBQUUsWUFBWTtnQkFDbkIsVUFBVSxFQUFFLFNBQVM7YUFDdEI7WUFFRCxRQUFRLEVBQUU7Z0JBU1IsTUFBTSxFQUFFLE9BQU87Z0JBV2YsYUFBYSxFQUFFLElBQUk7Z0JBWW5CLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQztnQkFhbEIsS0FBSyxFQUFFLEdBQUcsRUFBRSx5RUFBUSxpQkFBaUIsR0FBQzthQUN2QztTQUNGO0tBQ0Y7Q0FDRixDQUFBO0FBRUQsa0JBQWUsVUFBVSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb25maWcgc291cmNlOiBodHRwczovL2dpdC5pby9KdnlLeVxuICpcbiAqIEZlZWwgZnJlZSB0byBsZXQgdXMga25vdyB2aWEgUFIsIGlmIHlvdSBmaW5kIHNvbWV0aGluZyBicm9rZW4gaW4gdGhpcyBjb25maWdcbiAqIGZpbGUuXG4gKi9cblxuaW1wb3J0IHsgQXV0aENvbmZpZyB9IGZyb20gJ0Bpb2M6QWRvbmlzL0FkZG9ucy9BdXRoJ1xuXG4vKlxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58IEF1dGhlbnRpY2F0aW9uIE1hcHBpbmdcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufFxufCBMaXN0IG9mIGF2YWlsYWJsZSBhdXRoZW50aWNhdGlvbiBtYXBwaW5nLiBZb3UgbXVzdCBmaXJzdCBkZWZpbmUgdGhlbVxufCBpbnNpZGUgdGhlIGBjb250cmFjdHMvYXV0aC50c2AgZmlsZSBiZWZvcmUgbWVudGlvbmluZyB0aGVtIGhlcmUuXG58XG4qL1xuY29uc3QgYXV0aENvbmZpZzogQXV0aENvbmZpZyA9IHtcbiAgZ3VhcmQ6ICdhcGknLFxuICBsaXN0OiB7XG4gICAgLypcbiAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB8IE9BVCBHdWFyZFxuICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHxcbiAgICB8IE9BVCAoT3BhcXVlIGFjY2VzcyB0b2tlbnMpIGd1YXJkIHVzZXMgZGF0YWJhc2UgYmFja2VkIHRva2VucyB0byBhdXRoZW50aWNhdGVcbiAgICB8IEhUVFAgcmVxdWVzdC4gVGhpcyBndWFyZCBET0VTIE5PVCByZWx5IG9uIHNlc3Npb25zIG9yIGNvb2tpZXMgYW5kIHVzZXNcbiAgICB8IEF1dGhvcml6YXRpb24gaGVhZGVyIHZhbHVlIGZvciBhdXRoZW50aWNhdGlvbi5cbiAgICB8XG4gICAgfCBVc2UgdGhpcyBndWFyZCB0byBhdXRoZW50aWNhdGUgbW9iaWxlIGFwcHMgb3Igd2ViIGNsaWVudHMgdGhhdCBjYW5ub3QgcmVseVxuICAgIHwgb24gY29va2llcy9zZXNzaW9ucy5cbiAgICB8XG4gICAgKi9cbiAgICBhcGk6IHtcbiAgICAgIGRyaXZlcjogJ29hdCcsXG5cbiAgICAgIC8qXG4gICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgIHwgVG9rZW5zIHByb3ZpZGVyXG4gICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgIHxcbiAgICAgIHwgVXNlcyBTUUwgZGF0YWJhc2UgZm9yIG1hbmFnaW5nIHRva2Vucy4gVXNlIHRoZSBcImRhdGFiYXNlXCIgZHJpdmVyLCB3aGVuXG4gICAgICB8IHRva2VucyBhcmUgdGhlIHNlY29uZGFyeSBtb2RlIG9mIGF1dGhlbnRpY2F0aW9uLlxuICAgICAgfCBGb3IgZXhhbXBsZTogVGhlIEdpdGh1YiBwZXJzb25hbCB0b2tlbnNcbiAgICAgIHxcbiAgICAgIHwgVGhlIGZvcmVpZ25LZXkgY29sdW1uIGlzIHVzZWQgdG8gbWFrZSB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gdGhlIHVzZXJcbiAgICAgIHwgYW5kIHRoZSB0b2tlbi4gWW91IGFyZSBmcmVlIHRvIHVzZSBhbnkgY29sdW1uIG5hbWUgaGVyZS5cbiAgICAgIHxcbiAgICAgICovXG4gICAgICB0b2tlblByb3ZpZGVyOiB7XG4gICAgICAgIGRyaXZlcjogJ2RhdGFiYXNlJyxcbiAgICAgICAgdGFibGU6ICdhcGlfdG9rZW5zJyxcbiAgICAgICAgZm9yZWlnbktleTogJ3VzZXJfaWQnLFxuICAgICAgfSxcblxuICAgICAgcHJvdmlkZXI6IHtcbiAgICAgICAgLypcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHwgRHJpdmVyXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB8XG4gICAgICAgIHwgTmFtZSBvZiB0aGUgZHJpdmVyXG4gICAgICAgIHxcbiAgICAgICAgKi9cbiAgICAgICAgZHJpdmVyOiAnbHVjaWQnLFxuXG4gICAgICAgIC8qXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB8IElkZW50aWZpZXIga2V5XG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB8XG4gICAgICAgIHwgVGhlIGlkZW50aWZpZXIga2V5IGlzIHRoZSB1bmlxdWUga2V5IG9uIHRoZSBtb2RlbC4gSW4gbW9zdCBjYXNlcyBzcGVjaWZ5aW5nXG4gICAgICAgIHwgdGhlIHByaW1hcnkga2V5IGlzIHRoZSByaWdodCBjaG9pY2UuXG4gICAgICAgIHxcbiAgICAgICAgKi9cbiAgICAgICAgaWRlbnRpZmllcktleTogJ2lkJyxcblxuICAgICAgICAvKlxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgfCBVaWRzXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB8XG4gICAgICAgIHwgVWlkcyBhcmUgdXNlZCB0byBzZWFyY2ggYSB1c2VyIGFnYWluc3Qgb25lIG9mIHRoZSBtZW50aW9uZWQgY29sdW1ucy4gRHVyaW5nXG4gICAgICAgIHwgbG9naW4sIHRoZSBhdXRoIG1vZHVsZSB3aWxsIHNlYXJjaCB0aGUgdXNlciBtZW50aW9uZWQgdmFsdWUgYWdhaW5zdCBvbmVcbiAgICAgICAgfCBvZiB0aGUgbWVudGlvbmVkIGNvbHVtbnMgdG8gZmluZCB0aGVpciB1c2VyIHJlY29yZC5cbiAgICAgICAgfFxuICAgICAgICAqL1xuICAgICAgICB1aWRzOiBbJ3VzZXJuYW1lJ10sXG5cbiAgICAgICAgLypcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHwgTW9kZWxcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHxcbiAgICAgICAgfCBUaGUgbW9kZWwgdG8gdXNlIGZvciBmZXRjaGluZyBvciBmaW5kaW5nIHVzZXJzLiBUaGUgbW9kZWwgaXMgaW1wb3J0ZWRcbiAgICAgICAgfCBsYXppbHkgc2luY2UgdGhlIGNvbmZpZyBmaWxlcyBhcmUgcmVhZCB3YXkgZWFybGllciBpbiB0aGUgbGlmZWN5Y2xlXG4gICAgICAgIHwgb2YgYm9vdGluZyB0aGUgYXBwIGFuZCB0aGUgbW9kZWxzIG1heSBub3QgYmUgaW4gYSB1c2FibGUgc3RhdGUgYXRcbiAgICAgICAgfCB0aGF0IHRpbWUuXG4gICAgICAgIHxcbiAgICAgICAgKi9cbiAgICAgICAgbW9kZWw6ICgpID0+IGltcG9ydCgnQXBwL01vZGVscy9Vc2VyJyksXG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG59XG5cbmV4cG9ydCBkZWZhdWx0IGF1dGhDb25maWdcbiJdfQ==