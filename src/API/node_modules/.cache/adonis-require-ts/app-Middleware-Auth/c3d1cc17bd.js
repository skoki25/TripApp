"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const standalone_1 = require("@adonisjs/auth/build/standalone");
class AuthMiddleware {
    constructor() {
        this.redirectTo = '/login';
    }
    async authenticate(auth, guards) {
        let guardLastAttempted;
        for (let guard of guards) {
            guardLastAttempted = guard;
            if (await auth.use(guard).check()) {
                auth.defaultGuard = guard;
                return true;
            }
        }
        throw new standalone_1.AuthenticationException('Unauthorized access', 'E_UNAUTHORIZED_ACCESS', guardLastAttempted, this.redirectTo);
    }
    async handle({ auth }, next, customGuards) {
        const guards = customGuards.length ? customGuards : [auth.name];
        await this.authenticate(auth, guards);
        await next();
    }
}
exports.default = AuthMiddleware;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxnRUFBeUU7QUFTekUsTUFBcUIsY0FBYztJQUFuQztRQUlZLGVBQVUsR0FBRyxRQUFRLENBQUE7SUF3RGpDLENBQUM7SUE5Q1csS0FBSyxDQUFDLFlBQVksQ0FBRSxJQUFpQyxFQUFFLE1BQWE7UUFPNUUsSUFBSSxrQkFBc0MsQ0FBQTtRQUUxQyxLQUFLLElBQUksS0FBSyxJQUFJLE1BQU0sRUFBRTtZQUN4QixrQkFBa0IsR0FBRyxLQUFLLENBQUE7WUFFMUIsSUFBSSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBTWpDLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFBO2dCQUN6QixPQUFPLElBQUksQ0FBQTthQUNaO1NBQ0Y7UUFLRCxNQUFNLElBQUksb0NBQXVCLENBQy9CLHFCQUFxQixFQUNyQix1QkFBdUIsRUFDdkIsa0JBQWtCLEVBQ2xCLElBQUksQ0FBQyxVQUFVLENBQ2hCLENBQUE7SUFDSCxDQUFDO0lBS00sS0FBSyxDQUFDLE1BQU0sQ0FBRSxFQUFFLElBQUksRUFBdUIsRUFBRSxJQUF5QixFQUFFLFlBQXNCO1FBS25HLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDL0QsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUNyQyxNQUFNLElBQUksRUFBRSxDQUFBO0lBQ2QsQ0FBQztDQUNGO0FBNURELGlDQTREQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb25FeGNlcHRpb24gfSBmcm9tICdAYWRvbmlzanMvYXV0aC9idWlsZC9zdGFuZGFsb25lJ1xuXG4vKipcbiAqIEF1dGggbWlkZGxld2FyZSBpcyBtZWFudCB0byByZXN0cmljdCB1bi1hdXRoZW50aWNhdGVkIGFjY2VzcyB0byBhIGdpdmVuIHJvdXRlXG4gKiBvciBhIGdyb3VwIG9mIHJvdXRlcy5cbiAqXG4gKiBZb3UgbXVzdCByZWdpc3RlciB0aGlzIG1pZGRsZXdhcmUgaW5zaWRlIGBzdGFydC9rZXJuZWwudHNgIGZpbGUgdW5kZXIgdGhlIGxpc3RcbiAqIG9mIG5hbWVkIG1pZGRsZXdhcmUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dGhNaWRkbGV3YXJlIHtcbiAgLyoqXG4gICogVGhlIFVSTCB0byByZWRpcmVjdCB0byB3aGVuIHJlcXVlc3QgaXMgVW5hdXRob3JpemVkXG4gICovXG4gIHByb3RlY3RlZCByZWRpcmVjdFRvID0gJy9sb2dpbidcblxuICAvKipcbiAgICogQXV0aGVudGljYXRlcyB0aGUgY3VycmVudCBIVFRQIHJlcXVlc3QgYWdhaW5zdCBhIGN1c3RvbSBzZXQgb2YgZGVmaW5lZFxuICAgKiBndWFyZHMuXG4gICAqXG4gICAqIFRoZSBhdXRoZW50aWNhdGlvbiBsb29wIHN0b3BzIGFzIHNvb24gYXMgdGhlIHVzZXIgaXMgYXV0aGVudGljYXRlZCB1c2luZyBhbnlcbiAgICogb2YgdGhlIG1lbnRpb25lZCBndWFyZHMgYW5kIHRoYXQgZ3VhcmQgd2lsbCBiZSB1c2VkIGJ5IHRoZSByZXN0IG9mIHRoZSBjb2RlXG4gICAqIGR1cmluZyB0aGUgY3VycmVudCByZXF1ZXN0LlxuICAgKi9cbiAgcHJvdGVjdGVkIGFzeW5jIGF1dGhlbnRpY2F0ZSAoYXV0aDogSHR0cENvbnRleHRDb250cmFjdFsnYXV0aCddLCBndWFyZHM6IGFueVtdKSB7XG4gICAgLyoqXG4gICAgICogSG9sZCByZWZlcmVuY2UgdG8gdGhlIGd1YXJkIGxhc3QgYXR0ZW1wdGVkIHdpdGhpbiB0aGUgZm9yIGxvb3AuIFdlIHBhc3NcbiAgICAgKiB0aGUgcmVmZXJlbmNlIG9mIHRoZSBndWFyZCB0byB0aGUgXCJBdXRoZW50aWNhdGlvbkV4Y2VwdGlvblwiLCBzbyB0aGF0XG4gICAgICogaXQgY2FuIGRlY2lkZSB0aGUgY29ycmVjdCByZXNwb25zZSBiZWhhdmlvciBiYXNlZCB1cG9uIHRoZSBndWFyZFxuICAgICAqIGRyaXZlclxuICAgICAqL1xuICAgIGxldCBndWFyZExhc3RBdHRlbXB0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZFxuXG4gICAgZm9yIChsZXQgZ3VhcmQgb2YgZ3VhcmRzKSB7XG4gICAgICBndWFyZExhc3RBdHRlbXB0ZWQgPSBndWFyZFxuXG4gICAgICBpZiAoYXdhaXQgYXV0aC51c2UoZ3VhcmQpLmNoZWNrKCkpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluc3RydWN0IGF1dGggdG8gdXNlIHRoZSBnaXZlbiBndWFyZCBhcyB0aGUgZGVmYXVsdCBndWFyZCBmb3JcbiAgICAgICAgICogdGhlIHJlc3Qgb2YgdGhlIHJlcXVlc3QsIHNpbmNlIHRoZSB1c2VyIGF1dGhlbnRpY2F0ZWRcbiAgICAgICAgICogc3VjY2VlZGVkIGhlcmVcbiAgICAgICAgICovXG4gICAgICAgIGF1dGguZGVmYXVsdEd1YXJkID0gZ3VhcmRcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVbmFibGUgdG8gYXV0aGVudGljYXRlIHVzaW5nIGFueSBndWFyZFxuICAgICAqL1xuICAgIHRocm93IG5ldyBBdXRoZW50aWNhdGlvbkV4Y2VwdGlvbihcbiAgICAgICdVbmF1dGhvcml6ZWQgYWNjZXNzJyxcbiAgICAgICdFX1VOQVVUSE9SSVpFRF9BQ0NFU1MnLFxuICAgICAgZ3VhcmRMYXN0QXR0ZW1wdGVkLFxuICAgICAgdGhpcy5yZWRpcmVjdFRvLFxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgcmVxdWVzdFxuICAgKi9cbiAgcHVibGljIGFzeW5jIGhhbmRsZSAoeyBhdXRoIH06IEh0dHBDb250ZXh0Q29udHJhY3QsIG5leHQ6ICgpID0+IFByb21pc2U8dm9pZD4sIGN1c3RvbUd1YXJkczogc3RyaW5nW10pIHtcbiAgICAvKipcbiAgICAgKiBVc2VzIHRoZSB1c2VyIGRlZmluZWQgZ3VhcmRzIG9yIHRoZSBkZWZhdWx0IGd1YXJkIG1lbnRpb25lZCBpblxuICAgICAqIHRoZSBjb25maWcgZmlsZVxuICAgICAqL1xuICAgIGNvbnN0IGd1YXJkcyA9IGN1c3RvbUd1YXJkcy5sZW5ndGggPyBjdXN0b21HdWFyZHMgOiBbYXV0aC5uYW1lXVxuICAgIGF3YWl0IHRoaXMuYXV0aGVudGljYXRlKGF1dGgsIGd1YXJkcylcbiAgICBhd2FpdCBuZXh0KClcbiAgfVxufVxuIl19